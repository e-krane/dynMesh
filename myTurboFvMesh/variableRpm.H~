// Defining constants and variables
const scalar Pi(3.14159265359);	// Should thake this from mathematicalConstants in future
const vector CofR = dict_.subDict("coordinateSystem").lookup("origin");
const scalar rhoInf = readScalar( dict_.subDict("forcesDict").lookup("rhoInf") );
const wordList patches = dict_.subDict("forcesDict").lookup("patches");
const scalar Iz = readScalar( dict_.subDict("variableRpm").lookup("Iz") );
const scalar cutoffRpm = readScalar( dict_.subDict("variableRpm").lookup("cutoffRpm") );

scalar P = readScalar( dict_.subDict("variableRpm").lookup("P") );
scalar rpmOld = readScalar( dict_.subDict("variableRpm").lookup("startRpm") );
scalar alpha;
scalar rpm;
scalar Mflow;
scalar Mpow;

// Calculate forces on patches and moment about axis
dictionary forcesDict;
forcesDict.add("patches", patches);
forcesDict.add("rhoName", "rhoInf");
forcesDict.add("rhoInf", rhoInf);
forcesDict.add("CofR", CofR);

forces F("forces", *this, forcesDict);
forces::forcesMoments fm = F.calcForcesMoment();
//Mflow = fm.second().first().z()+fm.second().second().z();
Mflow = -0.2;

// Apply moment if the rotational speed is high enough (because rpm=0 => Mpow=Inf)
//if (abs(rpmOld) > cutoffRpm)
//{
//    Mpow = P/rpmOld*Pi/30;
//};

// Calculate angular acceleration and rpm
alpha = ( Mflow-Mpow )/Iz;
rpm = rpmOld //+ ( (30/Pi)*alpha )*time().deltaT().value();
rpmOld = rpm;
